[["index.html", "Семинары 1-3. Эксперименты. Неделя 1 About 1.1 Usage 1.2 Render book 1.3 Preview book", " Семинары 1-3. Эксперименты. Анна Ставнийчук 2021-08-29 Неделя 1 About This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 1.1 Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 1.2 Render book тетсирую You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select “All formats” if you’d like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, you’ll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 1.3 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book”, or from the R console: bookdown::serve_book() "],["01-experiments.html", "Неделя 2 Эксперименты 2.1 0. Организационные моменты 2.2 1. Установка R 2.3 2. Короткое напоминание теории 2.4 3. Работа со случайными числами в R 2.5 4. Мини-симуляция 2.6 5. Планирование эксперимента 2.7 6. Контрольные переменные 2.8 7. Скорректированное p-значение", " Неделя 2 Эксперименты 2.1 0. Организационные моменты Мои контакты Почта – annastavnychuk@gmail.com Telegram – https://t.me/AnnaStavniychuk Ресурсы по курсу Страница курса на on.econ – https://on.econ.msu.ru/course/view.php?id=1624 Чат курса – https://t.me/Applied_ECM_2021_chat Канал курса – Не стесняйтесь задавать свои вопросы в чат курса Ответ на ваш вопрос может быть полезен вашим однокурсникам В чате сразу четыре преподавателя, что в несколько раз повышает вероятность получить ответ на ваш вопрос скорее :) Вы также можете отвечать на вопросы ваших однокурсников или дискутировать с ними в чате 2.2 1. Установка R Установка R на компьютер состоит из двух частей: Установка дистрибутива R – https://cran.r-project.org/ Установка графического интерфейса. Они бывают разными, вы можете выбрать любой удобный для вас. Мы на занятиях будем использовать RStudio – https://www.rstudio.com/products/rstudio/download/ Более подробную инструкцию для разных ОС можно почитать тут. 2.3 2. Короткое напоминание теории 2.3.1 2.1. Потенциальные исходы Обозначения: \\(X_i\\) – независимые переменные (covariates) \\(T_i\\) – бинарная переменная воздействия (treatment variable): \\[\\begin{equation*} T_i = \\begin{cases} 1, &amp;\\text{воздействие на объект i оказано}\\\\ 0, &amp;\\text{воздействие на объект i не оказано} \\end{cases} \\end{equation*}\\] \\(Y_{i1}\\), \\(Y_{i0}\\) – потенциальные исходы (potential outcomes) Наблюдаемые исходы \\(Y_i\\) отличаются от потенциальных исходов. Потенциальные исходы являются гипотетическими случайными величинами, когда наблюдаемые исходы являются фактическими случайными величинами. Наблюдаемые исходы являются функцией от потенциальных исходов: \\(Y_i = T_i \\cdot Y_{i1} + (1-T_i) \\cdot Y_{i0}\\) Действительно при \\(T=1\\) мы получим \\(Y_i = Y_{i1}\\), а при \\(T=0\\) получим \\(Y_i = Y_{i0}\\). Тогда наш эффект воздействия для конкретного наблюдения равен разнице между двумя состояниями мира для этого наблюдения (потенциальными исходами): \\(\\tau_i = Y_{i1} - Y_{i0}\\) Фундаментальная проблема причинного вывода (Fundamental problem of causal inference): Чтобы оценить эффект воздействия для конкретного индивида, мы должны знать потенциальные исходы сразу для двух его состояний мира, но реально мы наблюдаем только одно из них – либо \\(Y_{i1}\\), если индивид подвергся воздействию, либо \\(Y_{i0}\\), если он ему не подвергался. Оценка индивидуального эффекта требует доступа к данным, которых у нас физически не может быть. 2.3.2 2.2. Средние эффекты Если с распределением индивидуального эффекта воздействия (treatment effect) работать не получается, будем довольствоваться средними величинами. Например, попробуем рассчитать средний эффект воздействия (average treatment effect): \\(ATE = \\mathbb{E}[\\tau_i] = \\mathbb{E}[Y_{i1} - Y_{i0}] = \\mathbb{E}[Y_{i1}] - \\mathbb{E}[Y_{i0}] \\xrightarrow{p} \\frac{1}{N_1}\\sum \\limits_{i=1}^{N_1}Y_{i1} - \\frac{1}{N_0}\\sum \\limits_{i=1}^{N_0}Y_{i0}\\) Следующий шаг, который мы предпримем, попробуем рассчиать величину эффекта только для тритмент группы – средний эффект воздействия на задействованных (average treatment effect for the treatment group): \\(ATT = \\mathbb{E}[\\tau_i|T_i=1] = \\mathbb{E}[Y_{i1} - Y_{i0}|T_i=1] = \\mathbb{E}[Y_{i1}|T_i=1] - \\mathbb{E}[Y_{i0}|T_i=1]\\) А теперь то же самое, но для контрольной группы – средний эффект воздействия на незадействованных (average treatment on the non-treated): \\(ATnT = \\mathbb{E}[\\tau_i|T_i=0] = \\mathbb{E}[Y_{i1} - Y_{i0}|T_i=0] = \\mathbb{E}[Y_{i1}|T_i=0] - \\mathbb{E}[Y_{i0}|T_i=0]\\) Обратите внимание, как и в случае с определением эффекта воздействия на индивидуальном уровне, различные модификации средних эффектов воздействия снова требуют от нас знания обоих потенциальных исходов для каждого наблюдения. Таким образом, и средние, и индивидуальный эффект воздействия нельзя напрямую рассчиать, но мы будем пробовать их оценить. Самая простая идея для оценки ATE, которая всем придет в голову, взять простую разницу в средних: \\(\\mathbb{E}[Y_1|T=1] - \\mathbb{E}[Y_0|T=0]\\). Но тут всё не так просто, после небольших преобразований, с которыми можно ознакомиться в части 4.1.3 учебника мы получим следующее: \\(\\mathbb{E}[Y_1|T=1] - \\mathbb{E}[Y_0|T=0] = \\underbrace{\\mathbb{E}[Y_1] - \\mathbb{E}[Y_0]}_{\\text{ATE}} + \\underbrace{\\mathbb{E}[Y_0|T=1] - \\mathbb{E}[Y_0|T=0]}_{\\text{Selection Bias}} + \\underbrace{(1-\\pi)(ATT - ATnT)}_{\\text{Heterogeneous treatment effect bias}}\\) ATE – интересующий нас эффект Selection Bias – смещение, возникающее из-за того, что контрольная группа и группа воздействия различались, даже если бы на них не было оказано воздействие, то есть имеет место некоторый дисбаланс Heterogeneous treatment effect bias – различие в интенсивности эффекта для тритмент и контрольной группы, взвешенное на долю выборки \\((1-\\pi)\\), которая попала в контрольную группу Далее мы рассмотрим предпосылки, которые позволяют нивелировать влияние этих двух смещений и получить оценку ATE. 2.3.3 2.3. Предпосылки Экзогенность воздействия (Independence assumption) Экзогенность воздействия (Independence assumption) означает, что распределение объекта в тритмент или контрольную группы осуществляется случайно и независимо от его изначальных характеристик. Данная предпосылка обычно обозначается следующим образом \\((T_1, Y_0, X)_i \\perp T_i\\) Технически для нас это значит следующее: \\(\\mathbb{E}[Y_0|T=1] - \\mathbb{E}[Y_0|T=0] = 0 \\Rightarrow \\text{Selection Bias}=0\\) \\(\\mathbb{E}[Y_1|T=1] - \\mathbb{E}[Y_1|T=0] = 0\\) \\((1-\\pi)(ATT - ATnT) = (1-\\pi)\\left[(\\mathbb{E}[Y_1|T=1]-\\mathbb{E}[Y_0|T=1])-(\\mathbb{E}[Y_1|T=0]-\\mathbb{E}[Y_0|T=0])\\right] = 0 \\Rightarrow \\text{Heterogeneous treatment effect bias}=0\\) То есть хорошая рандомизация, а следовательно, и выполнение предпосылок, позволяет нам очистить эффект воздействия от двух типов смещения, в этом случае: \\(ATE = \\mathbb{E}[Y_1] - \\mathbb{E}[Y_0] = \\mathbb{E}[Y_1|T=1] - \\mathbb{E}[Y_0|T=0] \\xrightarrow{p} \\frac{1}{N_1}\\sum \\limits_{i=1}^{N_1}Y_{i1} - \\frac{1}{N_0}\\sum \\limits_{i=1}^{N_0}Y_{i0}\\) Отсутствие “внешних эффектов” воздействия (SUTVA – Stable unit treatment value assumption) Эта предпосылка подразумевает выполнение двух вещей. Во-первых, воздействие оказывается только на один объект и внешние эффекты у него отсутствуют. Во-вторых, воздействие гомогенно – существует только один тип тритмента. 2.4 3. Работа со случайными числами в R В рамках курса нам неоднократно придется прибегнуть к генерации случайных чисел из какого-нибудь закона распределения, как правило, из нормального. Для работы со случайными числами из нормального распределения в R используется несколько функций: dnorm() для плотности вероятности, pnorm() для функции распределения, qnorm() для квантилей распределения и rnorm() для генерации случайных чисел. Почитать подробнее про них и посмотреть примеры можно тут или тут. Если вы не уверены в синтаксисе какой-то функции, вы можете воспользоваться встроенной справкой в RStudio (справочная информация появится во вкладке Help): ?rnorm Если вам когда-нибудь понадобятся функции для других распределений, вы можете, конечно, их просто загуглить или ввести в окне Help запрос “Distributions”: ?Distributions Теперь, когда мы точно знаем, как устроены аргументы у функции rnorm(n;mean;sd), давайте попробуем достать 5 чисел из стандартного нормального распределения \\(\\mathcal{N} \\sim \\left(0;1\\right)\\): rnorm(5,0,1) ## [1] -0.09186235 0.17554201 1.02173510 1.23737096 1.81294472 Если вы повторяли за мной, то у вас, вероятно, получились другие значения. А теперь я тоже попробую ещё раз: rnorm(5,0,1) ## [1] 0.8313721 -0.4475315 1.9463391 -0.5054657 0.2278392 Как и ожидалось, у меня тоже не совпало с предыдущим результатом. Существует по меньшей мере две причины, почему нам хотелось бы получать одинаковые результаты: Работа на семинарах, когда нам с вами было бы удобно сверяться Воспроизводимые научные исследования, когда любой читатель может реплицировать и проверить на корректность ваш результат В R существует несколько алгоритмов, позволящих генерировать случайные числа (Random Number Generator (RNG), подробнее – ?RNGkind). По умолчанию используется Mersenne twister (Вихрь Мерсенна), поскольку он работает наиболее быстро. Однако все эти алгоритмы на самом деле детерминированы, поэтому генерируемые ими числа корректнее называть “псевдослучайными”. Генератор псевдослучайных чисел начинает свою работу с определенной точки в пространстве возможных чисел. Эту точку приянто называть начальное число или seed. Начальное число – это число (или вектор), используемое для инициализации генератора псевдослучайных чисел. Если вы хотите получить одинаковые результаты с помощью генератора случайных чисел, важно установить начальное число. Для этого в R используется функция set.seed(). По умолчанию начальное число не установлено, если ничего не указать, то создается новое из текущего времени и идентификатора процесса на вашем устройстве. Следовательно, по умолчанию разные сеансы дают разные результаты моделирования. Давайте снова попробуем сгенерировать 5 чисел из случайного нормального распределения, но в этот раз зафиксируем seed: set.seed(123) rnorm(5,0,1) ## [1] -0.56047565 -0.23017749 1.55870831 0.07050839 0.12928774 И еще разок: set.seed(123) rnorm(5,0,1) ## [1] -0.56047565 -0.23017749 1.55870831 0.07050839 0.12928774 Получилось! В качестве seed можно использовать любое число, главное, чтобы при репликации оно каждый раз было одинаковым. Почитать про set.seed можно тут на русском и тут на английском. 2.5 4. Мини-симуляция Симуляции – это “игрушечные” примеры, которые позволят нам на протяжении курса разбираться с разными методами. Игрушечные они потому, что за ними не стоят реальные данные. Данные для симуляций мы будем специальным образом заранее моделировать. Это бывает удобно, когда идеально подходящих данных нет, или они не лежат в открытом доступе. К тому же, живые данные часто могут быть зашумлены из-за других факторов, на которые нам не всегда будет удобно отвлекаться на занятиях. Но с живыми данными мы тоже обязательно будем работать! В том числе, они будут доступны вам в домашних заданиях :) Теперь смоделируем небольшую симуляцию по мотивам изученого материала. 2.5.1 4.1. Подготовка данных Давайте смоделируем гипотетическую ситуацию. Мы хотим оценить величину эффекта от использование сайта с расписанием cacs.ws на свободное время студента. Предположим, что наша экспериментальная выборка состоит из 1000 человек: N &lt;- 1000 Для простоты у них будет всего две характеристики (\\(X\\) – возраст и \\(Z\\) – время в пути от дома до ЭФ), имеющих влияние на потенциальный исход (\\(Y_0\\) и \\(Y_1\\) – свободное время). При этом предположим, что реальный эффект воздействия равен \\(\\tau=15\\) минутам. Будем считать, что реальная зависимость потенциального исхода от ковариатов и тритмента выглядит следующим образом: \\(Y_0 = 240 - 3 \\cdot X - Z + 15 \\cdot \\underbrace{T}_{= 0} + \\varepsilon_0 = 120 - 3 \\cdot X - Z + \\varepsilon_0\\) - потенциальный исход, если не было оказано воздействие \\(Y_1 = 240 - 3 \\cdot X - Z + 15 \\cdot \\underbrace{T}_{= 1} + \\varepsilon_1 = 120 - 3 \\cdot X - Z + 15 + \\varepsilon_1\\) - потенциальный исход, если было оказано воздействие Сгенерируем \\(X\\) и \\(Z\\) случайным образом: set.seed(123) X &lt;- runif(N, 18, 25) Z &lt;- rnorm(N, 60, 20) ## Посмотрим на наши данные, нарисуем сразу 2 графика -- диаграмму разброса и гистограмму par(mfrow=c(2,2)) # читаем буквально как матрицы -- 2 строки и 2 столбца plot(X) hist(X) plot(Z) hist(Z) Также создадим случайные ошибки для каждого из типов индивидов: set.seed(123) e0 &lt;- rnorm(N/2, 0, 1) e1 &lt;- rnorm(N/2, 0, 1) plot(e0, col=&quot;red&quot;) points(e1, col=&#39;blue&#39;) Вспомогательно пронумеруем наши наблюдения: number &lt;- 1:N И соберем всё в общий датасет: data &lt;- data.frame(number = number, X=X, Z=Z) # сшиваем столбики в data frame head(data, 10) # смотрим только первые несколько строк датасета ## number X Z ## 1 1 20.01304 47.96214 ## 2 2 23.51814 40.12603 ## 3 3 20.86284 80.53570 ## 4 4 24.18112 75.02123 ## 5 5 24.58327 29.81667 ## 6 6 18.31890 58.09705 ## 7 7 21.69674 42.08104 ## 8 8 24.24693 18.58498 ## 9 9 21.86005 63.00240 ## 10 10 21.19630 58.41577 2.5.2 4.2. Рандомизация Что касается рандомизации, то наша глобальная задача, используя разные функции придумать способ, как случайным образом разбить выборку на 2 группы. Существует огромное множество вариантов, как это можно сделать. Мы обсудим лишь несколько из них. На практике вы можете пользоваться как этими вариантами, так и придумать что-то своё. 2.5.2.1 4.2.1. Использование порядкового номера Первый вариант – просто взять половину наблюдений по их порядку расположения в датасете. Пусть воздействие будет оказано только на первую половину нашей выборки. T1 &lt;- c(rep(1,N/2), rep(0,N/2)) mean(T1) # проверяем долю тритмента, должна получиться ровно половина ## [1] 0.5 data$T1 &lt;- T1 # добавляем переменную в датасет Тут мы воспользовались функцией c(...), которая позволяет объединить величины внутри неё в вектор, и функцией rep(x;times) которая повторяет величину \\(x\\) столько раз, сколько указано в величине \\(times\\). Второй вариант, который практически дублирует первый, но немного отличается – мы можем взять каждое второе наблюдение: T2 &lt;- rep(0:1, N/2) mean(T2) # проверяем долю тритмента, должна получиться ровно половина ## [1] 0.5 data$T2 &lt;- T2 # добавляем переменную в датасет 2.5.2.2 4.2.2. Использование свойств распределений Логично, что если мы хотим случайным образом присвоить наблюдениям разные группы, то мы можем начать с того, что присвоим им случайные числа, которые мы потом разными способами переведем в бинарный формат, который уже будет соотвествовать конкретной группе. Протестируем этот способ на примере трех распределений – нормального, равномерного и биномиального. 2.5.2.2.1 1) Равномерное распределение set.seed(123) V1 &lt;- runif(N) # генерим вспомогательную переменную из равномерного распределения T3 &lt;- as.numeric(V1 &lt; median(V1)) #генерим тритмент, отсекая половину выборки по медиане; as.numeric используется, чтобы перейти от логического типа (true, false) к численному (1 и 0) mean(T3) # проверяем долю тритмента, должна получиться ровно половина ## [1] 0.5 data$T3 &lt;- T3 # добавляем переменную в датасет 2.5.2.2.2 2) Нормальное распределение set.seed(123) V2 &lt;- rnorm(N) # генерим вспомогательную переменную из нормального распределения T4 &lt;- as.numeric(V2&gt;0) #генерим тритмент, отсекая половину выборки по знаку вспомогательной переменной; as.numeric используется, чтобы перейти от логического типа (true, false) к численному (1 и 0) summary(T4) # проверяем долю тритмента, должна получиться примерно половина ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 1.000 0.505 1.000 1.000 data$T4 &lt;- T4 # добавляем переменную в датасет 2.5.2.2.3 3) Биномиальное распределение set.seed(123) T5 &lt;- rbinom(N, 1, 0.5) #генерим тритмент, отсекая половину выборки по знаку вспомогательной переменной; as.numeric используется, чтобы перейти от логического типа (true, false) к численному (1 и 0) summary(T5) # проверяем долю тритмента, должна получиться примерно половина ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 0.493 1.000 1.000 data$T5 &lt;- T5 # добавляем переменную в датасет 2.5.2.3 4.2.3. Использование готовых пакетов library(&#39;experiment&#39;) set.seed(123) rand &lt;- randomize(data, group= c(&quot;Treat&quot;, &quot;Control&quot;)) T6 &lt;- as.numeric(rand$treatment == &quot;Treat&quot;) # преобразовываем переменную в численный формат data$T6 &lt;- T6 # добавляем переменную в датасет head(data, 10) ## number X Z T1 T2 T3 T4 T5 T6 ## 1 1 20.01304 47.96214 1 0 1 0 0 1 ## 2 2 23.51814 40.12603 1 1 0 0 1 1 ## 3 3 20.86284 80.53570 1 0 1 1 0 1 ## 4 4 24.18112 75.02123 1 1 0 1 1 0 ## 5 5 24.58327 29.81667 1 0 0 1 1 1 ## 6 6 18.31890 58.09705 1 1 1 1 0 0 ## 7 7 21.69674 42.08104 1 0 0 1 1 0 ## 8 8 24.24693 18.58498 1 1 0 0 1 1 ## 9 9 21.86005 63.00240 1 0 0 0 1 1 ## 10 10 21.19630 58.41577 1 1 1 0 0 1 2.5.2.4 4.2.4. Хэш-функции Существует ряд ситуаций, когда подходы к рандомизации, которые мы разобрали выше, работают не очень хорошо. Например, в вашу выборку добавилось несколько наблюдений, которые по какой-то причине добавились не в конец вашего датасета. В этом случае рандомизация не будет воспроизводимой, а тритмент и контрольная группы будут различаться. Однако есть способ решить эту сложность. Хэш-функция (hash function) – функция, осуществляющая преобразование массива входных данных произвольной длины в выходную битовую строку установленной длины, выполняемое определённым алгоритмом. Преобразование, производимое хэш-функцией, называется хэшированием. Хэш-функции применяются в следующих случаях: при построении ассоциативных массивов; при поиске дубликатов в последовательностях наборов данных; при построении уникальных идентификаторов для наборов данных; при вычислении контрольных сумм от данных (сигнала) для последующего обнаружения в них ошибок (возникших случайно или внесённых намеренно), возникающих при хранении и/или передаче данных; при сохранении паролей в системах защиты в виде хэш-кода (для восстановления пароля - по хэш-коду требуется функция, являющаяся обратной по отношению к использованной хэш-функции); при выработке электронной подписи (на практике часто подписывается не само сообщение, а его “хэш-образ”); и др. Для нас важно то, что с помощью хэш-функции мы сможем взаимно однозначно переводить данные формата строки в число. Пример хэширования с помощью пакета digest: library(&quot;digest&quot;) hash &lt;- digest(&#39;econometrics&#39;, algo=&quot;murmur32&quot;) hash ## [1] &quot;24b6de5a&quot; Пакет digest применяет хеш-функцию к произвольным объектам R. В пакете реализовано много разных алгоритмов преобразований, однако мы будем использовать алгоритм “murmur32” (подробнее почитать можно тут). Этот алгоритм совершенно не подходит для криптографических целей, но зато идеально подходит нам, поскольку он 32-битный, что позволяет нам перевести полученный хэш-код в целое число. Прежде чем начать разбирать пример, немного отвлечемся на техническую полезную вещь – функцию sapply(). Про семейство apply функций рекомендую почитать подробнее на русском тут или тут, а на английском тут. Прелесть функции sapply() состоит в том, что она позволяет нам избежать громоздких циклов при написании кода и ускорить вычисления благодаря “векторной ориентированности” языка R. Например, функция позволяет нам найти минимальное и максимальное значение для каждой из ковариат: sapply(list(X,Z), min) ## [1] 18.003257 3.804506 sapply(list(X,Z), max) ## [1] 24.99583 127.80742 То есть функция проводит однотипную операцию (по сути вложенную функцию) над каждым элементом списка. Если кто-то хорошо владеет python, то аналогичной функцией там является map(). Вернемся к нашей симуляции. Изначально мы это все затеяли, чтобы сделать хорошую рандомизацию. Сначала хэшируем номера наших наблюдений. Так делать не очень хорошо, обычно, для хэширования данных используют ФИО и/или СНИЛС, но мы не будем ради этого громоздить генерацию еще одной переменной. Для иллюстрации просто воспользуемся номерами, это тоже сработает. hashes &lt;- sapply(data$number, function(x) {digest(x, algo=&quot;murmur32&quot;)}) # хэшируем строчки hashes[1:20] ## [1] &quot;5e6216f3&quot; &quot;8b8b3789&quot; &quot;ad1bf356&quot; &quot;b2df92b2&quot; &quot;1d1b8e3a&quot; &quot;98d09cab&quot; ## [7] &quot;2e366c5a&quot; &quot;4d110361&quot; &quot;91d6bfe0&quot; &quot;f568e543&quot; &quot;08bd74cd&quot; &quot;e979af4b&quot; ## [13] &quot;a82e5827&quot; &quot;485cbd08&quot; &quot;bc4e5bd8&quot; &quot;95f68430&quot; &quot;7180d744&quot; &quot;da414596&quot; ## [19] &quot;70aa2885&quot; &quot;afd0ffd2&quot; Далее нужно перевести получившиеся строчки в цифровой числовой. Функция strtoi() конвертирует строковое представление числа, которое хранится в строке, в длинное целое. result &lt;- strtoi(substring(hashes, 2), base=16) result[1:20] ## [1] 241309427 193673097 219935574 48206514 219909690 147889323 238447706 ## [8] 219218785 30851040 90760515 146633933 158969675 137254951 140295432 ## [15] 206461912 100041776 25220932 172049814 11151493 265355218 Далее, используя эти числа, нужно как-то разбить выборку на тритмент и контроль. Будем смотреть на последнюю цифру, если она меньше 5, то наблюдение попадет в тритмент, если больше – в контроль. T7 &lt;- result %% 10 &lt; 5 # берем остаток от деления на 10 (получится последняя цифра) и сравниваем его с 5 data$T7 &lt;- as.numeric(T7) # переводим из логического типа в числовой и добавляем в датасет data$T7[1:20] ## [1] 0 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1 0 Проверим нашу рандомизацию на сбалансированность: summary(data) ## number X Z T1 T2 ## Min. : 1.0 Min. :18.00 Min. : 3.805 Min. :0.0 Min. :0.0 ## 1st Qu.: 250.8 1st Qu.:19.78 1st Qu.: 46.232 1st Qu.:0.0 1st Qu.:0.0 ## Median : 500.5 Median :21.43 Median : 60.576 Median :0.5 Median :0.5 ## Mean : 500.5 Mean :21.48 Mean : 60.239 Mean :0.5 Mean :0.5 ## 3rd Qu.: 750.2 3rd Qu.:23.23 3rd Qu.: 73.101 3rd Qu.:1.0 3rd Qu.:1.0 ## Max. :1000.0 Max. :25.00 Max. :127.807 Max. :1.0 Max. :1.0 ## T3 T4 T5 T6 T7 ## Min. :0.0 Min. :0.000 Min. :0.000 Min. :0.0 Min. :0.000 ## 1st Qu.:0.0 1st Qu.:0.000 1st Qu.:0.000 1st Qu.:0.0 1st Qu.:0.000 ## Median :0.5 Median :1.000 Median :0.000 Median :0.5 Median :1.000 ## Mean :0.5 Mean :0.505 Mean :0.493 Mean :0.5 Mean :0.508 ## 3rd Qu.:1.0 3rd Qu.:1.000 3rd Qu.:1.000 3rd Qu.:1.0 3rd Qu.:1.000 ## Max. :1.0 Max. :1.000 Max. :1.000 Max. :1.0 Max. :1.000 2.5.2.5 4.3. Реализация исходов Посчитаем потенциальные исходы: Y0 &lt;- 240 - 3*X - Z + 15*0 + e0 # T=0 Y1 &lt;- 240 - 3*X - Z + 15*1 + e1 # T=1 data$Y0 &lt;- Y0 # добавляем переменные в датасет data$Y1 &lt;- Y1 А также наблюдаемые исходы: data$Y &lt;- T1*Y1 + (1-T1)*Y0 2.5.3 4.3. Считаем эффект Когда данные подготовлены, мы забываем, что что-то о них знали :) С данного момента мы действуем согласно предпосылке, что мы знаем только \\(Y\\), \\(X\\) и \\(T\\). Поскольку мы знаем, что тритмент распределялся среди наблюдений случайно, мы можем сделать вывод, что предпосылка о независимости воздействия выполнена. Также мы знаем, что данные устроены так, что SUTVA тоже выполнена. Следовательно, можем использовать обычную разницу в средних, чтобы оценить эффнект воздействия: \\(\\widehat{ATE} = \\overline{Y_1} - \\overline{Y_0}\\) ATE_hat &lt;- mean(data$Y[T1==1]) - mean(data$Y[T1==0]) ATE_hat ## [1] 15.61754 Из курса ЭКМ-2 помним, что то же самое можно было бы получить, с помощью обычного парного МНК: model1 &lt;- lm(Y ~ T1, data=data) summary(model1) ## ## Call: ## lm(formula = Y ~ T1, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -76.984 -14.469 -0.314 13.235 60.998 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 115.0259 0.9094 126.49 &lt;2e-16 *** ## T1 15.6175 1.2861 12.14 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 20.33 on 998 degrees of freedom ## Multiple R-squared: 0.1287, Adjusted R-squared: 0.1279 ## F-statistic: 147.5 on 1 and 998 DF, p-value: &lt; 2.2e-16 Если обе предпосылки выполнены, то оценка должна быть несмещенной даже без контрольных переменных (ковариат). Попробуем их добавить и сравним оценки эффекта: model2 &lt;- lm(Y ~ T1 + X + Z, data=data) summary(model2) ## ## Call: ## lm(formula = Y ~ T1 + X + Z, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.9500 -0.4804 -0.0218 0.4296 3.2849 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 238.445186 0.296642 803.8 &lt;2e-16 *** ## T1 14.978356 0.052761 283.9 &lt;2e-16 *** ## X -3.001684 0.013116 -228.9 &lt;2e-16 *** ## Z -0.973141 0.001318 -738.4 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.8341 on 996 degrees of freedom ## Multiple R-squared: 0.9985, Adjusted R-squared: 0.9985 ## F-statistic: 2.266e+05 on 3 and 996 DF, p-value: &lt; 2.2e-16 Видим, что результаты устойчивы, величина эффекта практически не изменилась, но наша первая оценка все-таки была слегка завышеная, значит небольшое смещение было. Проверим контрольную и тритмент группу на “похожесть”, то есть проведем баланс ковариатов. Далее в качестве упраженения посчитаем средние эффекты на разных группах: ATT &lt;- mean(data$Y1[data$T1 == 1] - data$Y0[data$T1 == 1]) ATT ## [1] 14.96307 ATnT &lt;- mean(data$Y1[data$T1 == 0] - data$Y0[data$T1 == 0]) ATnT ## [1] 14.96307 Получили, то что и должны были получить – ATT = ATnT. Если мы вернемся в раздел, где мы подготовливали данные, то увидим, что в двух потенциальных исходах мы “зашифровали” одинаковый эффект: \\(Y_0 = 120 - 3 \\cdot X - Z + 15 \\cdot \\underbrace{T}_{= 0} + \\varepsilon_0 = 120 - 3 \\cdot X - Z + \\varepsilon_0\\) \\(Y_1 = 120 - 3 \\cdot X - Z + 15 \\cdot \\underbrace{T}_{= 1} + \\varepsilon_1 = 120 - 3 \\cdot X - Z + 15 + \\varepsilon_1\\) Содержательно это иллюстрирует то, что эффект воздействия гомогенен, то есть \\(\\text{Heterogeneous treatment effect bias} = (1-\\pi)(ATT - ATnT) = 0\\). 2.5.4 4.4. Баланс ковариатов Теперь проверим насколько наша рандомизация оказалась хорошей. Сравним средние значения ковариат в двух группах. 2.5.4.1 4.4.1. Сравнение средних mean(data$X[T1==1])-mean(data$X[T1==0]) ## [1] -0.02791759 mean(data$Z[T1==1])-mean(data$Z[T1==0]) ## [1] -0.5707093 Это не очень информативный способ, но если мы вспомним, что порядок значений ковариат измерялся десятками, то можно сделать вывод, что группы в среднем похожи. 2.5.4.2 4.4.2. Тест Стьюдента А теперь проведем тест на разницу в средних с помощью формального t-теста Стьюдента: \\(H_0:\\) среднее значение параметра в группах одинаковое, группы не различаются \\(H_1:\\) среднее значение параметра в группах разное, группы различаются t.test(data$X[T1==1], data$X[T1==0]) ## ## Welch Two Sample t-test ## ## data: data$X[T1 == 1] and data$X[T1 == 0] ## t = -0.21924, df = 997.51, p-value = 0.8265 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.2777933 0.2219581 ## sample estimates: ## mean of x mean of y ## 21.46699 21.49490 t.test(data$Z[T1==1], data$Z[T1==0]) ## ## Welch Two Sample t-test ## ## data: data$Z[T1 == 1] and data$Z[T1 == 0] ## t = -0.45032, df = 997.68, p-value = 0.6526 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.057656 1.916238 ## sample estimates: ## mean of x mean of y ## 59.95331 60.52402 Согласно значению p-value мы принимаем \\(H_0\\) и делаем вывод, что группы одинаковые. 2.5.4.3 4.4.2. Использование готовых пакетов library(&quot;tableone&quot;) table1 &lt;- CreateTableOne(vars=c(&quot;X&quot;, &quot;Z&quot;), strata=&quot;T1&quot;, data=data, test=TRUE) print(table1) ## Stratified by T1 ## 0 1 p test ## n 500 500 ## X (mean (SD)) 21.49 (2.04) 21.47 (1.99) 0.827 ## Z (mean (SD)) 60.52 (19.86) 59.95 (20.22) 0.653 2.5.5 4.5 Функции Можно ли было бы сделать все то же самое за меньшее число строчек кода и время? Конечно, можно. Более того, если бы похожую процедуру вам пришлось бы по каким-то причинам проводить несколько раз, например, когда у вас несколько экспериментов, функция для вас просто была бы незаменимым помощником. Попробуем переписать все то же самое в несколько функций. Функция для генерации данных generate_data &lt;- function(N){ N=N X &lt;- runif(N, 18, 25) Z &lt;- rnorm(N, 60, 20) e0 &lt;- rnorm(N/2, 0, 1) e1 &lt;- rnorm(N/2, 0, 1) number &lt;- 1:N Y0 &lt;- 240 - 3*X - Z + 15*0 + e0 Y1 &lt;- 240 - 3*X - Z + 15*1 + e1 data &lt;- data.frame(number = number, X=X, Z=Z, Y0=Y0, Y1=Y1) } Функция для рандомизации randomization &lt;- function(data, type){ N &lt;- nrow(data) if (type==&#39;in order&#39;){ T &lt;- c(rep(1,N/2), rep(0,N/2)) data$T &lt;- T } else if (type==&#39;by turns&#39;){ T &lt;- rep(0:1, N/2) data$T &lt;- T } else if (type==&#39;unif&#39;){ V &lt;- runif(N) T &lt;- as.numeric(V1 &lt; median(V1)) data$T &lt;- T } else if (type==&#39;norm&#39;){ V &lt;- rnorm(N) T &lt;- as.numeric(V2&gt;0) data$T &lt;- T } else if (type==&#39;binom&#39;){ T &lt;- rbinom(N, 1, 0.5) } return(data) } Функция для расчета наблюдаемого исхода outcome &lt;- function(data){ observed_data &lt;- data observed_data$Y &lt;- data$T*observed_data$Y1 + (1 - data$T)*observed_data$Y0 return(observed_data) } Функция для оценки эффекта estimate &lt;- function(data, response_variable) { m &lt;- mean(data[data$T==1, response_variable])-mean(data[data$T==0, response_variable]) return(m) } Функция для баланса ковариатов balance &lt;- function(data, covariates, type){ if (type==&#39;mean&#39;){ for (i in 1:length(covariates)){ cov &lt;- covariates[i] m &lt;- mean(data[data$T==1, cov])-mean(data[data$T==0, cov]) print(cov) print(m) } } else if (type==&#39;t.test&#39;){ for (i in 1:length(covariates)){ cov &lt;- covariates[i] t &lt;- t.test(data[data$T==1, cov], data[data$T==1, cov]) print(cov) print(t) } } } А теперь посмотрим, сколько строчек займет наша симуляция с использованием функций: set.seed(123) data1 &lt;- generate_data(1000) set.seed(123) data1 &lt;- randomization(data=data1, type=&#39;in order&#39;) data1 &lt;- outcome(data=data1) tail(data1,10) ## number X Z Y0 Y1 T Y ## 991 991 18.61054 75.36015 107.71110 125.93429 0 107.71110 ## 992 992 19.56646 37.83344 144.39269 158.58181 0 144.39269 ## 993 993 22.00504 44.27528 129.95640 144.11565 0 129.95640 ## 994 994 20.80118 105.68233 71.17735 87.99218 0 71.17735 ## 995 995 21.95826 38.13398 134.71123 149.89166 0 134.71123 ## 996 996 23.80737 64.28959 104.36495 120.01488 0 104.36495 ## 997 997 22.49480 77.85142 94.91935 111.10506 0 94.91935 ## 998 998 20.74049 80.37516 97.68081 112.19320 0 97.68081 ## 999 999 22.96706 81.78224 89.85344 105.76786 0 89.85344 ## 1000 1000 18.76177 56.73742 126.51679 142.61883 0 126.51679 estimate(data=data1, response_variable = &#39;Y&#39;) ## [1] 15.53169 balance(data=data1, covariates = c(&#39;X&#39;,&#39;Z&#39;), type = &#39;mean&#39;) ## [1] &quot;X&quot; ## [1] -0.02791759 ## [1] &quot;Z&quot; ## [1] -0.5707093 2.6 5. Планирование эксперимента Ранее мы говорили, что при достаточном объеме выборки и хорошей рандомизации в среднем тритмент группа и контрольная группа окажутся похожимы друг на друга за исключением оказываемого на них воздействия, в этом случае в качестве хорошей оценки эффекта можно использовать простую разницу в средних исходах. По разным причинам может получиться так, что тритмент группа и контрольная группа не похожи друг на друга. Существует 2 способа как бороться с несбалансированностью групп: ex ante: “быть умным заранее”. Изначально проводим эксперимент так, чтобы несбалансированности не было и используем простую оценку Престратификация ex post: берем такие данные, какие уже есть, но используем какие-то более умные и сложные оценки, сложнее обычной разницы в средних 2.6.1 5.1 Престратификация 2.6.2 5.2 Постстратификация 2.7 6. Контрольные переменные 2.8 7. Скорректированное p-значение Если у вас возникли какие-то вопросы, или вы нашли неточности в тексте, напишите мне об этом на почту annastavnychuk@gmail.com "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
